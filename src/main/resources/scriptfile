CREATE TABLE CITICNT.CITI_CNT_PAY_BATCH_SUMMARY
(
PAYMENT_INSTRUCTION_ID NUMBER 
,PAYMENT_INSTRUCTION_STATUS VARCHAR2(100)
,PAYMENT_COUNT NUMBER
,PAYMENT_AMOUNT VARCHAR2(100)
,ORG_ID NUMBER
,ORG_NAME VARCHAR2(500)
,PAYMENT_DATE DATE
,PAYMENT_CURRENCY_CODE VARCHAR2(100)
,ADDITIONAL_INFO VARCHAR2(2000)
,PIUID VARCHAR2(100)
,FILE_NAME VARCHAR2(1000)
,FILE_STATUS VARCHAR2(100)
,CREATION_DATE DATE
,CREATED_BY NUMBER
,LAST_UPDATE_DATE DATE
,LAST_UPDATED_BY NUMBER
,PROCESS_RUN_DATE DATE
,REQUEST_ID NUMBER
,CONSTRAINT "PAYSUM_PK" PRIMARY KEY (PAYMENT_INSTRUCTION_ID)
);

create synonym APPS.CITI_CNT_PAY_BATCH_SUMMARY for CITICNT.CITI_CNT_PAY_BATCH_SUMMARY;


  CREATE TABLE CITICNT.CITI_CNT_PAYMENT_DETAILS 
   (	PAYMENT_INSTRUCTION_ID NUMBER, 
	PAYMENT_ID NUMBER NOT NULL ENABLE, 
	PAYMENT_NUMBER NUMBER, 
	LOGICAL_GROUP_REFERENCE VARCHAR2(200 BYTE), 
	ALREADY_EXISTS VARCHAR2(255 BYTE), 
	FILE_STATUS VARCHAR2(255 BYTE), 
	ORG_ID NUMBER, 
	ORG_NAME VARCHAR2(500 BYTE), 
	PAYMENT_AMOUNT VARCHAR2(255 BYTE), 
	PAYMENT_CURRENCY_CODE VARCHAR2(255 BYTE), 
	PAYMENT_DATE DATE, 
	PAYMENT_METHOD_CODE VARCHAR2(255 BYTE), 
	PAYMENT_STATUS VARCHAR2(255 BYTE), 
	REQUEST_ID NUMBER, 
	SUPPLIER_ID NUMBER, 
	SUPPLIER_NAME VARCHAR2(500 BYTE), 
	SUPPLIER_SITE_ID NUMBER, 
	SUPPLIER_SITE_NAME VARCHAR2(255 BYTE), 
	PAYMENT_PROCESS_REQUEST_NAME VARCHAR2(500 BYTE), 
	PAYMENT_PROFILE_NAME VARCHAR2(500 BYTE), 
	PROCESS_RUN_DATE DATE, 
	ADDITIONAL_INFO VARCHAR2(2000 BYTE), 
	PIUID VARCHAR2(100 BYTE), 
	CREATED_BY NUMBER, 
	CREATION_DATE DATE, 
	LAST_UPDATE_DATE DATE, 
	LAST_UPDATED_BY NUMBER, 
	 CONSTRAINT "PAYDET_PK" PRIMARY KEY (PAYMENT_ID), 
	 FOREIGN KEY (PAYMENT_INSTRUCTION_ID)
	  REFERENCES CITICNT.CITI_CNT_PAY_BATCH_SUMMARY (PAYMENT_INSTRUCTION_ID) ENABLE
   );
 

create synonym APPS.CITI_CNT_PAYMENT_DETAILS for CITICNT.CITI_CNT_PAYMENT_DETAILS;

 CREATE TABLE CITICNT.CITI_CNT_PAY_INVOICES
   (	
   PAYMENT_ID NUMBER,
   INVOICE_NUM VARCHAR2(500 BYTE) NOT NULL, 
	INVOICE_AMOUNT VARCHAR2(255 BYTE), 
	INVOICE_CURRENCY_CODE VARCHAR2(255 BYTE), 
	INVOICE_DATE DATE, 
	INVOICE_ID NUMBER, 
	CREATED_BY NUMBER, 
	CREATION_DATE DATE, 
	LAST_UPDATE_DATE DATE, 
	LAST_UPDATED_BY NUMBER, 
	ORG_ID NUMBER, 
	PAYMENT_METHOD_CODE VARCHAR2(255 BYTE), 
	REQUEST_ID NUMBER, 
	SUPPLIER_NAME VARCHAR2(500), 
	SUPPLIER_SITE_NAME VARCHAR2(255 BYTE), 
	 FOREIGN KEY (PAYMENT_ID) REFERENCES CITICNT.CITI_CNT_PAYMENT_DETAILS(PAYMENT_ID)
	 );
	 
	 create synonym APPS.CITI_CNT_PAY_INVOICES for CITICNT.CITI_CNT_PAY_INVOICES;

CREATE TABLE CITICNT.CITI_CNT_PAYMENT_COMMENTS (
	COMMENT_ID NUMBER PRIMARY KEY,
    PAYMENT_INSTRUCTION_ID NUMBER,
	PAYMENT_ID NUMBER,
	COMMENTS VARCHAR2(1000),
	STATUS VARCHAR2(10),
	CREATED_BY NUMBER,
	CREATION_DATE TIMESTAMP,
	LAST_UPDATE_DATE TIMESTAMP,
	LAST_UPDATED_BY NUMBER,
	ORG_ID NUMBER
	);
	
	create synonym APPS.CITI_CNT_PAYMENT_COMMENTS for CITICNT.CITI_CNT_PAYMENT_COMMENTS;
	
	 CREATE TABLE CITICNT.CITI_CNT_PAYBATCH_ACK_DETAILS (
      PAYBATCH_ACK_ID VARCHAR2(500) PRIMARY KEY,
      PAYMENT_INSTRUCTION_ID NUMBER,
       ACK_STATUS VARCHAR2(100),
       FILE_NAME VARCHAR2(100),
        CREATED_BY NUMBER,
        CREATION_DATE DATE,
        LAST_UPDATE_DATE DATE,
        LAST_UPDATED_BY NUMBER,
        ORG_ID NUMBER,
         FILE_STATUS VARCHAR2(255),
 		ADDITIONAL_INFO VARCHAR2(1000)
   );

create synonym APPS.CITI_CNT_PAYBATCH_ACK_DETAILS for CITICNT.CITI_CNT_PAYBATCH_ACK_DETAILS;


CREATE TABLE CITICNT.CITI_CNT_PAYMENT_ACK_DETAILS (
      ACK_ID VARCHAR2(500) PRIMARY KEY,
       PAYMENT_ID NUMBER,
	   PAYMENT_INSTRUCTION_ID NUMBER,
	   PAYMENT_NUMBER NUMBER,
	   LOGICAL_GROUP_REFERENCE VARCHAR2(200),
       ACK_STATUS VARCHAR2(100),
       FILE_NAME VARCHAR2(100),
        CREATED_BY NUMBER,
        CREATION_DATE DATE,
        LAST_UPDATE_DATE DATE,
        LAST_UPDATED_BY NUMBER,
        ORG_ID NUMBER,
         FILE_STATUS VARCHAR2(255),
         PAYMENT_AMOUNT VARCHAR2(255),
        PAYMENT_CURRENCY_CODE VARCHAR2(255),
        PAYMENT_DATE DATE,
		ADDITIONAL_INFO VARCHAR2(1000),
        PAYMENT_STATUS VARCHAR2(255)
   );
   
   create synonym APPS.CITI_CNT_PAYMENT_ACK_DETAILS for CITICNT.CITI_CNT_PAYMENT_ACK_DETAILS;
   
   CREATE TABLE CITICNT.CITI_PAYMENTS_PIUID 
   (	PIUID VARCHAR2(20 BYTE) NOT NULL , 
	PAYMENT_METHOD VARCHAR2(100 BYTE) NOT NULL , 
	SERVICE_LEVEL VARCHAR2(100 BYTE), 
	DELIVERY_CHANNEL_CODE VARCHAR2(100 BYTE), 
	COUNTRY_CODE VARCHAR2(10 BYTE) NOT NULL , 
	ATTRIBUTE1 VARCHAR2(100 BYTE), 
	ATTRIBUTE2 VARCHAR2(100 BYTE), 
	CREATION_DATE DATE, 
	CREATED_BY NUMBER, 
	LAST_UPDATED_BY NUMBER, 
	LAST_UPDATE_DATE DATE
   );
   
   create synonym APPS.CITI_PAYMENTS_PIUID for  CITICNT.CITI_PAYMENTS_PIUID;
   
CREATE or REPLACE VIEW CITICNT.CITICNT_PAY_BATCH_ACK_VIEW AS
SELECT 
    CBS.PAYMENT_INSTRUCTION_ID,
	CBS.PAYMENT_INSTRUCTION_STATUS,
	CBS.PAYMENT_COUNT,
	CBS.ORG_ID,
	CBS.ORG_NAME,
	CBS.PAYMENT_AMOUNT,
	CBS.PAYMENT_CURRENCY_CODE,
	CBS.PAYMENT_DATE,
	CBS.ADDITIONAL_INFO,
	CBS.PIUID,
	  CBS.CREATION_DATE,
	  CBS.CREATED_BY,
	  CBS.LAST_UPDATED_BY,
       (SELECT CPB1.FILE_NAME FROM CITICNT.CITI_CNT_PAYBATCH_ACK_DETAILS CPB1
,(
Select MAX(last_update_Date) LAST_UPDATE_DATE1,payment_instruction_id from CITICNT.CITI_CNT_PAYBATCH_ACK_DETAILS 
group by payment_instruction_id
order by payment_instruction_id) CPB
WHERE CPB.payment_instruction_id=CPB1.payment_instruction_id
AND CPB.LAST_UPDATE_DATE1=CPB1.LAST_UPDATE_dATE
AND CPB.payment_instruction_id=CBS.payment_instruction_id
) FILE_NAME,
      (SELECT CPB1.LAST_UPDATE_dATE FROM CITICNT.CITI_CNT_PAYBATCH_ACK_DETAILS CPB1
,(
Select MAX(last_update_Date) LAST_UPDATE_DATE1,payment_instruction_id from CITICNT.CITI_CNT_PAYBATCH_ACK_DETAILS 
group by payment_instruction_id
order by payment_instruction_id) CPB
WHERE CPB.payment_instruction_id=CPB1.payment_instruction_id
AND CPB.LAST_UPDATE_DATE1=CPB1.LAST_UPDATE_dATE
AND CPB.payment_instruction_id=CBS.payment_instruction_id
)LAST_UPDATE_DATE,
      (SELECT CPB1.FILE_STATUS FROM CITICNT.CITI_CNT_PAYBATCH_ACK_DETAILS CPB1
,(
Select MAX(last_update_Date) LAST_UPDATE_DATE1,payment_instruction_id from CITICNT.CITI_CNT_PAYBATCH_ACK_DETAILS 
group by payment_instruction_id
order by payment_instruction_id) CPB
WHERE CPB.payment_instruction_id=CPB1.payment_instruction_id
AND CPB.LAST_UPDATE_DATE1=CPB1.LAST_UPDATE_dATE
AND CPB.payment_instruction_id=CBS.payment_instruction_id
) ACK_STATUS
,
(select cpc1.comments from CITICNT.CITI_CNT_PAYMENT_COMMENTS cpc1
,(
SELECT max(comment_id) comment_id,payment_instruction_id
FROM  CITICNT.CITI_CNT_PAYMENT_COMMENTS
group by payment_instruction_id) cpc
where cpc.comment_id=cpc1.comment_id
and cpc.payment_instruction_id=cpc1.payment_instruction_id
AND CPC1.PAYMENT_instruction_id IS NOT NULL
and cpc1.payment_instruction_id=CBS.payment_instruction_id
) COMMENTS
FROM CITICNT.CITI_CNT_PAY_BATCH_SUMMARY CBS; 

create synonym APPS.CITICNT_PAY_BATCH_ACK_VIEW for CITICNT.CITICNT_PAY_BATCH_ACK_VIEW;
	 
	 
	CREATE OR REPLACE VIEW CITICNT.CITICNT_PAYMENT_ACK_VIEW AS
    SELECT 
    CPD.PAYMENT_INSTRUCTION_ID,
	    CPD.PAYMENT_ID,
        CPD.PAYMENT_NUMBER,
		CPD.LOGICAL_GROUP_REFERENCE,
		CPD.ALREADY_EXISTS,
      CPD.SUPPLIER_ID,
	  CPD.SUPPLIER_NAME,
	  CPD.SUPPLIER_SITE_ID,
	  CPD.SUPPLIER_SITE_NAME,
	  CPD.PAYMENT_METHOD_CODE,
	  CPD.PAYMENT_STATUS,
	  CPD.PAYMENT_AMOUNT,
	  CPD.PAYMENT_CURRENCY_CODE,
	  CPD.ORG_ID,
	  CPD.ORG_NAME,
	  CPD.REQUEST_ID,
	   CPD.PAYMENT_DATE,
	  CPD.CREATION_DATE,
	  CPD.CREATED_BY,
	  CPD.LAST_UPDATED_BY,
	  CPD.FILE_STATUS,
	  CPD.ADDITIONAL_INFO,
	  CPD.PIUID,
	 (SELECT CPAD1.FILE_NAME FROM CITI_CNT_PAYMENT_ACK_DETAILS CPAD1
,(
Select MAX(last_update_Date) LAST_UPDATE_DATE1,payment_number from CITI_CNT_PAYMENT_ACK_DETAILS 
group by payment_number
order by payment_number) CPAD
WHERE CPAD.PAYMENT_NUMBER=CPAD1.PAYMENT_NUMBER
AND CPAD.LAST_UPDATE_DATE1=CPAD1.LAST_UPDATE_dATE
AND CPAD.PAYMENT_NUMBER=CPD.PAYMENT_NUMBER
) FILE_NAME,
      (SELECT CPAD1.last_update_Date FROM CITI_CNT_PAYMENT_ACK_DETAILS CPAD1
,(
Select MAX(last_update_Date) LAST_UPDATE_DATE1,payment_number from CITI_CNT_PAYMENT_ACK_DETAILS 
group by payment_number
order by payment_number) CPAD
WHERE CPAD.PAYMENT_NUMBER=CPAD1.PAYMENT_NUMBER
AND CPAD.LAST_UPDATE_DATE1=CPAD1.LAST_UPDATE_dATE
AND CPAD.PAYMENT_NUMBER=CPD.PAYMENT_NUMBER
) LAST_UPDATE_DATE,
  (select cpc1.comments from CITI_CNT_PAYMENT_COMMENTS cpc1
,(
SELECT max(comment_id) comment_id,payment_id
FROM  CITI_CNT_PAYMENT_COMMENTS
group by payment_id) cpc
where cpc.comment_id=cpc1.comment_id
and cpc.payment_id=cpc1.payment_id
and cpc.payment_id=cpd.payment_id
AND CPC1.PAYMENT_ID IS NOT NULL
) COMMENTS,
    (SELECT CPAD1.ACK_STATUS FROM CITI_CNT_PAYMENT_ACK_DETAILS CPAD1
,(
Select MAX(last_update_Date) LAST_UPDATE_DATE1,payment_number from CITI_CNT_PAYMENT_ACK_DETAILS 
group by payment_number
order by payment_number) CPAD
WHERE CPAD.PAYMENT_NUMBER=CPAD1.PAYMENT_NUMBER
AND CPAD.LAST_UPDATE_DATE1=CPAD1.LAST_UPDATE_dATE
AND CPAD.PAYMENT_NUMBER=CPD.PAYMENT_NUMBER
) ACK_STATUS
FROM CITI_CNT_PAYMENT_DETAILS CPD;

create synonym APPS.CITICNT_PAYMENT_ACK_VIEW for CITICNT.CITICNT_PAYMENT_ACK_VIEW;



-- Apps Schema 


create sequence CITICNT.CITI_CNT_PAY_COMM_SEQ start with 1000 increment by 1;

create synonym APPS.CITI_CNT_PAY_COMM_SEQ for  CITICNT.CITI_CNT_PAY_COMM_SEQ;




CREATE OR REPLACE TRIGGER CITICNT.CITI_CNT_PAY_COMM_TRG 
BEFORE DELETE OR INSERT OR UPDATE ON CITICNT.CITI_CNT_PAYMENT_COMMENTS 
FOR EACH ROW 


BEGIN 
   select CITICNT.CITI_CNT_PAY_COMM_SEQ.nextval into :new.comment_id from dual;
   
END; 
/ 


create synonym APPS.CITI_CNT_PAY_COMM_TRG for  CITICNT.CITI_CNT_PAY_COMM_TRG;

grant all on APPS.fnd_global to CITICNT;

GRANT EXECUTE ON APPS.fnd_file TO CITICNT; 

CREATE OR REPLACE SYNONYM citicnt.fnd_file FOR apps.fnd_file; 

CREATE OR REPLACE SYNONYM apps.CITI_IBY_PPR_INFO_PKG FOR CITICNT.CITI_IBY_PPR_INFO_PKG; 
